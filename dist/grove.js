"use strict";class t{constructor(e={key:"",node:null},r=!1){if(!(r||(null==e?void 0:e.key)&&"string"==typeof e.key))throw new Error("Parent key cannot be null, empty, or not of type string!");if(!(r||(null==e?void 0:e.node)&&e.node instanceof t))throw new Error("Parent node cannot be null, empty, or not an instance of TrieNode");this._parent=e,this._children={},this.data=null,this.isEndOfWord=!1,this.word=null}get parent(){return this._parent}get children(){return this._children}update(t){this.isEndOfWord=!!t,this.data=t,this.isEndOfWord||(this.word=null)}unlink(){this._parent={key:"",node:null}}hasChildren(){return Object.keys(this._children).length>0}deleteChild(t){this._children[t]&&(this._children[t].update(null),this._children[t].unlink(),this._children[t].word=null,delete this._children[t])}addChild(t,e){if(!t||!e)return null;const r=this._children[t];return this._children[t]=e,r||null}hasChild(t){return!!this._children[t]}}exports.Trie=class{constructor(){this._root=new t(null,!0),this._lastIndex=1}get root(){return this._root}insert(t,e){return this._insertWord(t,e,this._root,0)}_insertWord(e,r,n,i){if(i===e.length)return n.word=e,n.update(r||this._getNextIndex()),!0;const s=e.charAt(i);return n.hasChild(s)||n.addChild(s,new t({key:s,node:n})),this._insertWord(e,r,n.children[s],i+1)}search(t){const e=this._searchNode(t,this._root,0);return e?e.data:null}_searchNode(t,e,r){if(r===t.length)return e.isEndOfWord?e:null;const n=t.charAt(r);return e.hasChild(n)?this._searchNode(t,e.children[n],r+1):null}delete(t){const e=this._searchNode(t,this._root,0);return!!e&&(e.hasChildren()?(e.update(null),!0):(this._deleteWord(e),!0))}_deleteWord(t){var e;if(t===this._root)return;const r=t.parent;null===(e=null==r?void 0:r.node)||void 0===e||e.deleteChild(r.key),(null==r?void 0:r.node)&&!r.node.hasChildren()&&this._deleteWord(r.node)}update(t,e){const r=this._searchNode(t,this._root,0);return!!r&&(r.update(e),!0)}getDataNode(t){return this._searchNode(t,this._root,0)}getPath(t){const e=[this._root];for(let r=1;r<=t.length;r++)e.push(this._searchNode(t.substring(0,r),this._root,0));return e}_getNextIndex(){return this._lastIndex++}},exports.TrieNode=t;
//# sourceMappingURL=grove.js.map
